import { promises as fs } from "fs";
import path from "path";
import { getIronSession } from "iron-session";
import { sessionOptions } from "../../lib/session";
import { encrypt } from "../../lib/crypto"; // üëà Import encrypt

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå config ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
const configFilePath = path.join(process.cwd(), "db_config.json");

export default async function handler(req, res) {
  const session = await getIronSession(req, res, sessionOptions);

  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô Admin)
  if (
    !session.user ||
    !session.user.isLoggedIn ||
    session.user.role !== "Admin"
  ) {
    return res.status(403).json({ message: "Forbidden: Admins only." });
  }

  if (req.method === "POST") {
    try {
      const { db_host, db_port, db_name, db_user, db_pass } = req.body;

      // 2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ config ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      let currentConfig = {};
      try {
        const data = await fs.readFile(configFilePath, "utf8");
        currentConfig = JSON.parse(data);
      } catch (error) {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£
      }

      // 3. üöÄ [Logic ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      let finalPasswordToSave;

      if (db_pass) {
        // 3a. ‡∏ñ‡πâ‡∏≤ User ‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
        finalPasswordToSave = encrypt(db_pass);
      } else {
        // 3b. ‡∏ñ‡πâ‡∏≤ User ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡πâ‡∏≠‡∏ô:
        const oldPass = currentConfig.db_pass;

        if (oldPass && !oldPass.includes(":")) {
          // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Plain text (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
          // ‡πÉ‡∏´‡πâ "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™" ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ã‡∏∞
          console.log("Encrypting existing plain-text password...");
          finalPasswordToSave = encrypt(oldPass);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏µ :) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
          // ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          finalPasswordToSave = oldPass;
        }
      }

      // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡πÉ‡∏´‡∏°‡πà
      const newConfig = {
        db_host: db_host || currentConfig.db_host,
        db_port: db_port || currentConfig.db_port,
        db_name: db_name || currentConfig.db_name,
        db_user: db_user || currentConfig.db_user,
        db_pass: finalPasswordToSave, // üëà ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô Logic ‡πÅ‡∏•‡πâ‡∏ß
      };

      // 5. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå config.json
      await fs.writeFile(
        configFilePath,
        JSON.stringify(newConfig, null, 2),
        "utf8"
      );

      res.status(200).json({
        message: "Settings saved successfully. (Password encrypted)",
      });
    } catch (error) {
      console.error("Failed to save config file:", error);
      res.status(500).json({ message: "Failed to save settings" });
    }
  } else {
    res.setHeader("Allow", ["POST"]);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
